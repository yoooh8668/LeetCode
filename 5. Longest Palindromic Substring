//check if palindromic for string s[i] to s[j]
bool palindromic (char * s,int i, int j)
{
    for(int k=j; k>(j-k+i) ; k--)
    {
        if (s[(j-k+i)] != s[k])
        {
            //printf("NOT MATCH!!\n\n");
            return false;   
        }
    }
    return true;
}


char * longestPalindrome(char * s){
    int sLen = strlen(s);
    char maxStr[(sLen+1)];
    char *result = &maxStr;
    
    //+++finding palindromic here
    int currentLen = 1;
    int i_save=0;
    bool ifPalindromic = false;
    /*Find longest palindromic string for i start,
      if the current i is not possible to create a longer palindromic, won't check it.*/
    for (int i=0 ; ((sLen - i) > currentLen) ; i++) 
    {
        for(int j=(sLen-1) ; ((j-i+1) > currentLen) ; j--)
        {
            //printf("i = %d,j = %d \n",i,j);
            ifPalindromic = palindromic(s,i,j);
            if ((ifPalindromic && ((j-i+1) > currentLen)))
            {
                //printf("Max palindromic for (i = %d) \nis  (j = %d)\n\n",i,j);
                i_save = i;
                currentLen = j-i+1;
                break;
            }
        }
    }
    //---finding palindromic here
    if (sLen == 0)
    {
        maxStr[0] = '\0';
        return result;   
    }
    else if (currentLen == 1)
    {
        maxStr[0] = s[0];
        maxStr[1] = '\0';
        return result;
    }
    else 
    {
        for (int i=i_save ; i<(currentLen + i_save) ; i++)
        {
            maxStr[(i-i_save)] = s[i];
        }
        maxStr[currentLen] = '\0';
        return result;
    }
}
/*C best runtime
char* longestPalindrome(char* s) {
    int slen = strlen(s);
    int tlen = slen * 2 + 1;
    char t[tlen];
    for (int i = 0; i < slen; i++) {
        t[2 * i] = '|';
        t[2 * i + 1] = s[i];
    }
    t[tlen - 1] = '|';
    int lps_len[tlen];

    int c = 0, r = 0, max = 0;
    lps_len[0] = 0;
    for (int i = 1; i < tlen; i++) {
        if (i < r && i + lps_len[2 * c - i] < r) {
            lps_len[i] = lps_len[2 * c - i];
        } else {
            int j = r + 1;
            while (j < tlen && 2 * i - j > -1 && t[j] == t[2 * i - j]) {
                j++;
            }
            lps_len[i] = j - i - 1;
            c = i;
            r = j - 1;
            if (lps_len[i] > lps_len[max]) {
                max = i;
            }
        }
    }

    int max_len = lps_len[max];
    int max_index = (max - max_len) / 2;
    char *buf = (char *) malloc(sizeof(char) * (max_len + 1));
    for (int i = 0; i < max_len; i++) {
        buf[i] = s[i + max_index];
    }
    buf[max_len] = '\0';
    return buf;
}
*/
