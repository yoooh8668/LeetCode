/**************************
1.Directly finding.
  Search until match item,
  Use flag to determine whether the start/end are finish finding.
  O(n)
**************************/
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int start = -1;
    int end = -1;
    int startFlag=0;
    int endFlag=0;
    int *result = malloc(sizeof(int)*2);
    *returnSize=2;
    
    //numsSize ==0
    if (numsSize==0)
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    
    //finding target
    for (int i =0 ; i<numsSize;i++)
    {
        //Finding start
        if (nums[i]==target)
        {
            start=i;
            startFlag=1;
            for (int j=i+1 ; j<numsSize ;j++)
            {
                //at lease one end
                if (nums[j]==target)
                {
                    end=j;
                    continue;
                }
                //all end are be found.
                else
                {
                    end=j-1;
                    endFlag=1;
                    break;
                }
            }
            break;
        }
    }
    
    //All finish
    if (startFlag==1 && endFlag==1)
    {
        result[0]=start;
        result[1]=end;
    }
    //end searching reach the end of array, still finish.
    else if (startFlag==1 && endFlag==0 && end!=-1)
    {
        result[0]=start;
        result[1]=end; //numsSize-1
    }
    //Couldn't find an end, end = start.
    else if (startFlag==1 && endFlag==0 && end==-1)
    {
        result[0]=start;
        result[1]=start;;
    }
    //Couldn't find a start.
    else
    {
        result[0]=-1;
        result[1]=-1;
    }
    return result;

}


/******************************
2.Binary search first, and find start/end one by one.
  O(log n + ?)
******************************/
int binarySearch(int* nums, int start, int end,int target)
{
    int half=0;
    //check if target is at start or end?
    if (nums[start]==target)
        return start;
    else if (nums[end]==target)
        return end;
    
    while(1)
    {    
        int half=(start+end)/2;

        if (nums[half]==target)
            return half;
        else if (half==start) //no element that to be searched
            return -1;
        else if (nums[half]>target) //at left side
            end = half;
        else                        //at right side
            start = half;
    }
}

int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int *result = malloc(sizeof(int)*2);
    *returnSize=2;
    
    //numsSize ==0
    if (numsSize==0)
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    
    int start=binarySearch(nums,0,numsSize-1,target);
    int end=start;
    int startFlag=0;
    int endFlag=0;
    
    // at least one match.
    if (start != -1) 
    {
        while(!(startFlag&&endFlag))
        {
            if (start-1 >= 0 && nums[start-1]==target)
                start--;
            else 
                startFlag=1;
            if (end+1 < numsSize && nums[end+1]==target)
                end++;
            else 
                endFlag=1;
        }
    }
    else 
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    result[0]=start;
    result[1]=end;
    return result;
}


/*********************
3.Binary search for target and then binary search start/end.
*********************/

int binarySearch(int* nums, int start, int end,int target)
{
    int half=0;
    //check if target is at start or end?
    if (nums[start]==target)
        return start;
    else if (nums[end]==target)
        return end;
    
    half=(start+end)/2;
    
    while(half!=start)
    {    
        if (nums[half]==target)
            return half;
        else if (nums[half]>target) //at left side
            end = half;
        else                        //at right side
            start = half;
        half=(start+end)/2;
    }
    return -1;
}

int rightIndexSearch(int* nums, int start, int end,int target)
{
    int half=0;
    half = (start+end)/2;
    while(half!=start)
    {
        if (nums[half]==target)
            end = half;
        else
            start=half;
        half=(start+end)/2;    
    }
    return end;
}

int leftIndexSearch(int* nums, int start, int end,int target)
{
    int half=0;
    end++; //index fix for last element.
    
    half = (start+end)/2;
    while(start!=half)
    {
        if (nums[half]==target)
            start = half;
        else if (nums[half]>target)
            end=half;
        
        half=(start+end)/2;    
    }
    return start;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int *result = malloc(sizeof(int)*2);
    *returnSize=2;
    
    //numsSize ==0
    if (numsSize==0)
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    
    int targetFound=binarySearch(nums,0,numsSize-1,target);
    int end;
    int start;
    
    // at least one match.
    if (targetFound != -1) 
    {
        start = rightIndexSearch(nums,0,targetFound,target);
        end =  leftIndexSearch(nums,targetFound,numsSize-1,target);
    }
    else 
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    result[0]=start;
    result[1]=end;
    return result;
}

/***************************
4.Combine right/left index search function.
***************************/
int binarySearch(int* nums, int start, int end,int target)
{
    int half=0;
    //check if target is at start or end?
    if (nums[start]==target)
        return start;
    else if (nums[end]==target)
        return end;
    
    half=(start+end)/2;
    
    while(half!=start)
    {    
        if (nums[half]==target)
            return half;
        else if (nums[half]>target) //at left side
            end = half;
        else                        //at right side
            start = half;
        half=(start+end)/2;
    }
    return -1;
}

int sameIndexSearch(int* nums, int start, int end,int target, bool left)
{
    int half=0;
    //index fix for last element.
    if (left)
        end++;
    
    half = (start+end)/2;
    while(half!=start)
    {
        if (nums[half]==target)
        {
            if (left)
                start = half;
            else
                end = half;
        }
        else
        {
            if(left)
                end=half;
            else
                start=half;
        }
        half=(start+end)/2;    
    }
    if(left)
        return start;
    else 
        return end;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int *result = malloc(sizeof(int)*2);
    *returnSize=2;
    
    //numsSize ==0
    if (numsSize==0)
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    
    int targetFound=binarySearch(nums,0,numsSize-1,target);
    int end;
    int start;
    
    // at least one match.
    if (targetFound != -1) 
    {
        start = sameIndexSearch(nums,0,targetFound,target,0);
        end =  sameIndexSearch(nums,targetFound,numsSize-1,target,1);
    }
    else 
    {
        result[0]=-1;
        result[1]=-1;
        return result;
    }
    result[0]=start;
    result[1]=end;
    return result;
}
