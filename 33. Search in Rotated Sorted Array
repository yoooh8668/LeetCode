/**************************
  1.Time complexity = O(n)
  Just search one by one XD.
**************************/

int search(int* nums, int numsSize, int target){
    for (int i=0 ; i<numsSize ;i++)
    {
        if (nums[i]==target)
            return i;
    }
    return -1;
}


/**************************
  2.sort it first and use half search
  Time complexity = O(n/2 + log n)
  Binary search for sorted array.
**************************/
int binarySearch(int* nums, int start, int end,int target)
{
    int half=0;
    //check if target is at start or end?
    if (nums[start]==target)
        return start;
    else if (nums[end]==target)
        return end;
    
    while(1)
    {    
        int half=(start+end)/2;

        if (nums[half]==target)
            return half;
        else if (half==start) //no element that to be searched
            return -1;
        else if (nums[half]>target) //at left side
            end = half;
        else                        //at right side
            start = half;
    }
}

int search(int* nums, int numsSize, int target){
    int numsSort[numsSize];
    int pivot=0;
    
    //no pivot condition
    if (numsSize==1)
    {
        if (nums[0]==target)
            return 0;
        else
            return -1;
    }
    
    //find the pivot
    for (int i=1 ; i<numsSize ;i++)
    {
        if(nums[i]>nums[i-1])
            continue;
        else
        {
            pivot = i;
            break;
        }
    }
    
    //create a sorted nums
    if (pivot == 0)
    {
        for (int i=0 ;i<numsSize ;i++)
            numsSort[i]=nums[i];
    }
    else
    {
        for(int i=0 ; i<numsSize ;i++)
        {
            if (i<pivot)    //ori left
                numsSort[numsSize-pivot+i]=nums[i];
            else            //ori right
                numsSort[i-pivot]=nums[i];
        }
    }
    
    int result=binarySearch(numsSort,0,numsSize-1,target);
    
    if (result == -1)
        return -1;
    
    if (result < numsSize-pivot)
        return pivot+result;
    else
        return result-numsSize+pivot;
}
