

int minDistance(char * word1, char * word2){
    int oneLen=strlen(word1);
    int twoLen=strlen(word2);
    
    int dp[oneLen+1][twoLen+1];
    //diangle means skip, left means add a char, up means remove a char.
    for (int i=0 ; i<oneLen+1 ; i++)
    {
        for (int j=0 ; j<twoLen+1 ;j++)
        {
            //if i=0, can only perform 'add char' operation.
            if (i==0)
                dp[i][j]=j;
            //if j=0, cam only perform 'remove char' operation.
            else if (j==0)
                dp[i][j]=i;
            //if i=j, skip this char.
            else if (word1[i-1]==word2[j-1])
                dp[i][j] = dp[i-1][j-1];
            else
            {
                //search the smallest of diangle/left/up .
                //diangle means replace.
                //using above operation need to add one to operation.
                if      (dp[i-1][j-1] <= dp[i-1][j]   && dp[i-1][j-1] <= dp[i][j-1])
                    dp[i][j]=dp[i-1][j-1];
                else if (dp[i-1][j]   <= dp[i-1][j-1] && dp[i-1][j]   <= dp[i][j-1])
                    dp[i][j]=dp[i-1][j];
                else //  dp[i][j-1]   <= dp[i-1][j-1] && dp[i][j-1]   <= dp[i-1][j]
                    dp[i][j]=dp[i][j-1];
                dp[i][j]++;
            }
        }
    }
    return dp[oneLen][twoLen];
}
