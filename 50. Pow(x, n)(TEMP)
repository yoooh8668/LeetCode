 /*****************************
 1.Just answer below XD:
 *****************************/
 double myPow(double x, int n){
    return pow(x,n);
}
 
 
/****************************
2.Use Binary Exponentiation way and Recursive.
  https://cp-algorithms.com/algebra/binary-exp.html
****************************/
/************************
x^n
For n=0 , result = 1;
For (n>0 && n is odd) , result=x*(a^2), a is x^((n-1)/2)
For (n>0 && n is even), result=  a^2  , a is x^(n/2)
*************************/
double positivePow (double x, int n)
{
    if (n==0)
        return 1;
    double result = positivePow(x, n/2);
    if (n%2==1)
        return x*result*result;
    else
        return result*result;
}

double myPow(double x, int n){
    double result;
    bool nMin =0 ;
    bool nNegative=0;
    
    if (n<0)
    {
        //Special condition for n*(-1) overflow
        if (n==INT_MIN)
        {
            nMin=1;
            n++;
        }
        nNegative = 1;
        n=abs(n);
    }
    //Binary Exponentiation
    result = positivePow(x,n);
    
    //If n is negative, division.
    if (nNegative)
        result = 1/result;
    
    //If n is INT_MIN, missing multiply once.
    if (nMin)
        result*=x;
    
    return result;
}
