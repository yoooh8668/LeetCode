double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){
    int sizeOfAll = nums1Size + nums2Size;
    int s[sizeOfAll];
    float result = 0;//for return
    int one_Start =0;//nums1 loading number
    int two_Start =0;//nums2 loading number
    
    //if no element in both array ==> return 0
    if (sizeOfAll == 0)
        return result;
    
    //+++sort two nums start
    int count = 0;
    int oneFlag = 0;//if nums1 loading OK ?
    int twoFlag = 0;//if nums2 loading OK ?
    if (one_Start == nums1Size)
        oneFlag=1;
    if (two_Start == nums2Size)
        twoFlag=1;

    while((oneFlag == 0) || (twoFlag == 0)){//if both array loading OK?
        //printf("WHILE PROCEES\n");
        if (oneFlag == 1) // no element in nums1 ==>insert 2
        {
            s[count] = nums2[two_Start];
            two_Start ++;
            if (two_Start == nums2Size)
                twoFlag =1;
        }
        else if (twoFlag == 1) // no element in nums2 ==>insert 1
        {
            s[count] = nums1[one_Start];
            one_Start ++;
            if (one_Start == nums1Size)
                oneFlag =1;
        }
        else if(nums1[one_Start] > nums2[two_Start])  //==>insert 2
        {
            s[count] = nums2[two_Start];
            two_Start ++;
            if (two_Start == nums2Size)
                twoFlag =1;
        }
        else                                         //==>insert 1
        {
            s[count] = nums1[one_Start];
            one_Start ++;
            if (one_Start == nums1Size)
                oneFlag =1;
        }
        //printf("s[%d] = %d\n",count,s[count]);
        //printf("one_Start = %d , two_Start = %d\n",one_Start,two_Start);
        //printf("oneFlag = %d   , twoFlag = %d\n",oneFlag,twoFlag);
        //printf("\n");
        count++;
    }//while end
    //---sort two nums end

    if(sizeOfAll == 1)
    {
        result = s[0];
        return result;
    }
    else if (sizeOfAll%2 == 1)//odd
    {
        result = s[((sizeOfAll - 1 )/2)];
        return result;
    }
    else //even
    {
        result = s[(sizeOfAll/2)]+s[((sizeOfAll/2) - 1)];
        return result/2;
    }
}
