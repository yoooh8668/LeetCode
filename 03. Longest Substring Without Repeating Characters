
//check if char repeat in recent length
bool ifRepeat (char *s ,int startNumber,int targetNumber)
{
    //printf("Repeat of %d and %d\n",startNumber,targetNumber);
    bool repeat = false;
    for (int i=startNumber ; i<=(targetNumber-1) ; i++)
    {
        if (s[i]==s[targetNumber])
        {
            repeat = true;
            //printf("REPEAT!!\n");
            break;
        }
    }
    return repeat;
}


int lengthOfLongestSubstring(char * s){
    int sLen =0 ;
    sLen = strlen( s );
    //printf("sLen = %d\n",sLen);
    
    int maxLen = 0;
    int currentLen =0;
    bool repeatFlag = false;
    //at least oneLength
    if (sLen>0)
        maxLen = 1;
    //startNumber
    for (int i=0 ; i<sLen ; i++)
    {
        //printf("***i = %d\n",i);
        //targetNumber
        for (int j=(i+1) ; j<sLen ; j++)
        {
            repeatFlag = ifRepeat(s,i,j);
            if (!repeatFlag)//Non repeat
            {
                currentLen = (j - i+1);
            }
            else
            {
                break;
            }
        }
        if (maxLen < currentLen)
            maxLen = currentLen;
        //printf("maxLen = %d\n\n",maxLen);
    }

    return maxLen;
}

/*Best Solution on web
int lengthOfLongestSubstring(char* s) {
    int count=1;
    int max_count=1;
    int j_start=0;
    
    if(!s[0])
        return 0;
    else if(!s[1])
        return max_count;
    
    for(int i=1; s[i]; i++)
    {
        for(int j=j_start; j<i; j++)
        {
            
            if(s[i] != s[j])
                count++;
            else
            {
                j_start = j+1;    
                break;
            }
        }
        if(max_count < count)
            max_count = count;
        count = 1;
    }
    return max_count;
}
*/
