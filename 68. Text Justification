//prevent copy '\0' in target
void stringcopy(char* target, int shift, char* str){
    int sLen=strlen(str);
    for (int i=0 ; i<sLen ;i++)
        target[shift+i]=str[i];
}

//add numbers space 
void addSpace(char* target, int shift, int numbers){
    for (int i=0 ; i<=numbers ;i++)
        target[shift+i]=' ';
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** fullJustify(char ** words, int wordsSize, int maxWidth, int* returnSize){
    char** result=malloc(sizeof(char*)*wordsSize);
    *returnSize=0;
    
    int count=0;
    int countStart;
    int remainSize=0;
    int spaceNumber;
    int spaceWidth;
    int spaceLargerWidth;
    int targetPosition;
    
    //Still have word to be added.
    while(count<wordsSize)
    {
        countStart=count;
        remainSize=maxWidth;
        targetPosition=0;
        result[(*returnSize)]=malloc(sizeof(char)*maxWidth+1);
        
        //Find how many words can be store in one line.
        while ( (count < wordsSize) && remainSize+1 > strlen(words[count]) )
        {
            remainSize-=strlen(words[count]);
            remainSize--;//extra space for another string
            count++;
        }
        remainSize++;//last element don't need space after
        
        //How many space section?
        spaceNumber=(count-1)-countStart;
        
        //Only one word => left justified.
        if (spaceNumber==0)
        {
            stringcopy(result[(*returnSize)],0,words[countStart]);
            targetPosition=strlen(words[countStart]);
            addSpace(result[(*returnSize)], targetPosition, maxWidth-strlen(words[countStart]));
        }
        //if not the last line => add space fully justified.
        else if (count != wordsSize)
        {
            //one space is 'spaceWidth +1' number.
            spaceWidth = remainSize/spaceNumber;
            //And there are 'spaceLargerWidth' sections that need to add one space more.
            spaceLargerWidth = remainSize%spaceNumber;
            
            for (int i=countStart ; i<count ; i++)
            {
                stringcopy(result[(*returnSize)],targetPosition,words[i]);
                targetPosition += strlen(words[i]);
                //space of larger width
                if (spaceLargerWidth != 0)
                {
                    addSpace(result[(*returnSize)], targetPosition, spaceWidth+2);
                    spaceLargerWidth--;
                    targetPosition += (spaceWidth+2);
                }
                //space of normal width (except for last word) 
                else if (i != count-1)
                {
                    addSpace(result[(*returnSize)], targetPosition, spaceWidth+1);
                    targetPosition += spaceWidth+1;
                }
            }
        }
        //if this is last line ==> leftShift.
        else
        {
            stringcopy(result[(*returnSize)],targetPosition,words[countStart]);
            targetPosition += strlen(words[countStart]);
            //section can only have one space.
            for (int i=countStart+1 ; i<count ; i++)
            {
                addSpace(result[(*returnSize)], targetPosition, 1);
                targetPosition ++;
                stringcopy(result[(*returnSize)],targetPosition,words[i]);
                targetPosition += strlen(words[i]);
            }
            //left justified
            addSpace(result[(*returnSize)], targetPosition, maxWidth-targetPosition);
        }
        result[(*returnSize)][maxWidth]='\0';
        (*returnSize)++;
    }
    return result;
}
