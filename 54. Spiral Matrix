/*********************************************
1.Create a array(temp) that number 1 to matrixNumbers, that indicate a spiral order.
  matrix[i][j] = Result[k], k=temp[i][j].
*********************************************/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){
    int matrixSizeCol=matrixColSize[0];
    int matrixNumbers= matrixSize*matrixSizeCol;
    int* result=malloc(sizeof(int)*matrixNumbers);
    
    //Clear temp
    int temp[matrixSize][matrixSizeCol];
    for (int i=0; i<matrixSize ;i++)
    {
        for (int j=0; j<matrixSizeCol ;j++)
        {
            //If searching temp[i][j]=10000, means temp[i][j] is not put a element yet.
            temp[i][j]=10000;
        }
    }
    int direction=0;
    int row=0;
    int col=0;
    for (int i=0; i<matrixNumbers ;i++)
    {
        if (direction==0)//right
        {
            if (col==matrixSizeCol || temp[row][col]!=10000)
            {
                col--;
                row++;
                i--;
                direction++;
                continue;
            }
            temp[row][col++]=i;
        }
        else if (direction==1)//down
        {
            if (row==matrixSize || temp[row][col]!=10000)
            {
                row--;
                col--;
                i--;
                direction++;
                continue;
            }
            temp[row++][col]=i;
        }
        else if (direction==2)//left
        {
            if (col == -1 || temp[row][col]!=10000)
            {
                col++;
                row--;
                i--;
                direction++;
                continue;
            }
            temp[row][col--]=i;
        }
        else                    //up
        {
            if (row < 0 || temp[row][col]!=10000)
            {
                row++;
                col++;
                i--;
                direction=0;
                continue;
            }
            temp[row--][col]=i;
        }
        
    }
    for (int i=0; i<matrixSize ;i++)
    {
        for (int j=0; j<matrixSizeCol ;j++)
        {
            result[temp[i][j]]=matrix[i][j];
        }
    }
    *returnSize=matrixNumbers;
    return result;
}

/****************************
2.function 1 without using temp array.
****************************/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){
    int matrixSizeCol=matrixColSize[0];
    int matrixNumbers= matrixSize*matrixSizeCol;
    int* result=malloc(sizeof(int)*matrixNumbers);
    
    int direction=0;
    int row=0;
    int col=0;
    for (int i=0; i<matrixNumbers ;i++)
    {
        if (direction==0)//right
        {
            if (col==matrixSizeCol || matrix[row][col]==101)
            {
                col--;
                row++;
                i--;
                direction++;
                continue;
            }
            result[i]=matrix[row][col];
            matrix[row][col++]=101;
        }
        else if (direction==1)//down
        {
            if (row==matrixSize || matrix[row][col]==101)
            {
                row--;
                col--;
                i--;
                direction++;
                continue;
            }
            result[i]=matrix[row][col];
            matrix[row++][col]=101;
        }
        else if (direction==2)//left
        {
            if (col == -1 || matrix[row][col]==101)
            {
                col++;
                row--;
                i--;
                direction++;
                continue;
            }
            result[i]=matrix[row][col];
            matrix[row][col--]=101;
        }
        else                    //up
        {
            if (row < 0 || matrix[row][col]==101)
            {
                row++;
                col++;
                i--;
                direction=0;
                continue;
            }
            result[i]=matrix[row][col];
            matrix[row--][col]=101;
        }
        
    }
    *returnSize=matrixNumbers;
    return result;
}
