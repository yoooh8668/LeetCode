
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** insert(int** intervals, int intervalsSize, int* intervalsColSize, int* newInterval, int newIntervalSize, int* returnSize, int** returnColumnSizes){
    //intervals are already sorted.
    int** result=malloc(sizeof(int*)*(intervalsSize+1));
    int *retcolsizes = malloc(sizeof(int)*(intervalsSize+1));
    *returnColumnSizes = retcolsizes;
    *returnSize=0;
    
    int min=newInterval[0];
    int max=newInterval[1];
    int doneFlag=0; //Whether new Interval has been added?
    int skipFlag=0; //If the last interval is added, skip adding to result.
    for (int i=0 ; i<intervalsSize ; i++)
    {
        if (doneFlag==0)
        {
            //new[0] > intervals[i][1] && new[1] > intervals[i][1] ==> skip this interval.
            if ( !(min>intervals[i][1] && max>intervals[i][1]) )
            {
                //if new[0] >= intervals[i][0] && new[0]<= intervals[i][1] or 
                //if new[0] <= intervals[i][0] && new[1] >= intervals[i][1], continue search end. 
                if ( (min>=intervals[i][0] && min <= intervals[i][1] )|| (min <= intervals[i][0] && max >= intervals[i][1]))
                {
                    min = (min < intervals[i][0])?min:intervals[i][0];
                    for (int j=i ; j<=intervalsSize ; j++)
                    {
                        //last element is not found.
                        if (j==intervalsSize)
                        {
                            result[(*returnSize)]=malloc(sizeof(int)*2);
                            retcolsizes[(*returnSize)]=2;
                            result[(*returnSize)][0]=min;
                            max=(max>intervals[j-1][1])?max:intervals[j-1][1];
                            result[(*returnSize)][1]=max;
                            (*returnSize)++;
                            i=j;
                            skipFlag=1;
                        }
                        else
                        {
                            //min~new[0]
                            if (max < intervals[j][0] )
                            {
                                result[(*returnSize)]=malloc(sizeof(int)*2);
                                retcolsizes[(*returnSize)]=2;
                                result[(*returnSize)][0]=min;
                                result[(*returnSize)][1]=max;
                                (*returnSize)++;
                                i=j;
                                break;
                            }
                            //min~intervals[j][1]
                            else if (max <= intervals[j][1])
                            {
                                result[(*returnSize)]=malloc(sizeof(int)*2);
                                retcolsizes[(*returnSize)]=2;
                                result[(*returnSize)][0]=min;
                                result[(*returnSize)][1]=intervals[j][1];
                                (*returnSize)++;
                                if ( j< intervalsSize-1)
                                    i=j+1;
                                else
                                {
                                    i=j;
                                    skipFlag=1;
                                }
                                break;
                            }
                        }
                    }
                    doneFlag=1;
                }
                //new[0] is not between in any intervals && new[1] is in an interval, combine. 
                else if ( max>=intervals[i][0] && max <= intervals[i][1] )
                {
                    result[(*returnSize)]=malloc(sizeof(int)*2);
                    retcolsizes[(*returnSize)]=2;
                    result[(*returnSize)][0]=min;
                    result[(*returnSize)][1]=intervals[i][1];
                    (*returnSize)++;
                    doneFlag=1;
                    if ( i< intervalsSize-1)
                        i++;
                    else
                        skipFlag=1;
                }
                //newInterval in between two intervals.
                else if (max < intervals[i][0])
                {
                    result[(*returnSize)]=malloc(sizeof(int)*2);
                    retcolsizes[(*returnSize)]=2;
                    result[(*returnSize)][0]=min;
                    result[(*returnSize)][1]=max;
                    (*returnSize)++;
                    doneFlag=1;
                }
            }//if ( !(min>intervals[i][1] && max>intervals[i][1]) )
        }//if (doneFlag==0)
        
        //Add interval to result.
        if (skipFlag==0)
        {
            result[(*returnSize)]=malloc(sizeof(int)*2);
            retcolsizes[(*returnSize)]=2;
            result[(*returnSize)][0]=intervals[i][0];
            result[(*returnSize)][1]=intervals[i][1];
            (*returnSize)++;
        }
    }
    
    //newInterval is the last element.
    if (doneFlag==0)
    {
        result[(*returnSize)]=malloc(sizeof(int)*2);
        retcolsizes[(*returnSize)]=2;
        result[(*returnSize)][0]=min;
        result[(*returnSize)][1]=max;
        (*returnSize)++;
    }

    return result;
}
