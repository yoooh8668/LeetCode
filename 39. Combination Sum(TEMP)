

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes){
    int **result=malloc(sizeof(int*)*200);
    *returnColumnSizes=malloc(sizeof(int)*200);
    *returnSize=0;
    int end = candidatesSize-1;
    int start = end;
    int stack [target+1];
    int top = -1;
    int sum = 0;
    
    while (end!=-1)
    {
        printf("end=%d\n",end);
        top++;
        stack[top]=start;
        //printf("top=%d, stack[top]= %d\n",top,stack[top]);

        //create sum
        sum=0;
        for (int i=0 ; i<=top ;i++)
        {
            sum+=candidates[stack[i]];
        }

        if (sum == target)
        {
            (*returnColumnSizes)[*returnSize]=(top+1);
            result[*returnSize]=malloc(sizeof(int)*(top+1));
            //printf("match !! result=[");
            for (int i=top; i>=0 ; i--)
            {
                //printf("value=%d\n",candidates[stack[i]]);
                result[*returnSize][top-i]=candidates[stack[i]];
                //printf("result=%d\n",result[*returnSize][top-i]);
            }
            (*returnSize)++;
            //printf("\n");
        }
        else if (sum < target)
        {
            continue;
        }


        /*
          pop function
          Pop one element, if poped one was 0, pop continue and pop additional one element.
          If last element is poped, end--.
        */
        //printf("[pop] it is last element\n");
        //pop til stack[top]==0 
        while(top>=0 && stack[top]==0)
        {
            start=stack[top]-1;
            top--;
        }
        //still has element ==> top--.
        if (top != -1)
        {
            start=stack[top]-1;
            top--;
        }
        //if no element ==> end--.
        if (top==-1)
        {
            end--;
            start=end;
        }
    }
    return result;
}
