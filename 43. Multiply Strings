
/********************
result[0] = num1[size-1-0]*nums2[size-1-0]+
            carry[0]
            
result[1] = num1[size-1-0]*nums2[size-1-1]+
            num1[size-1-1]*nums2[size-1-0]+
            carry[1]
            
result[2] = num1[size-1-0]*nums2[size-1-2]+
            num1[size-1-1]*nums2[size-1-1]+
            num1[size-1-1]*nums2[size-1-1]+
            carry[2]
....
result[i] = (num1[size-1-j]*num2[size-1-i+j])while(int j=0 ; i-j>=0)
            + carry[i]

Then swap result.
********************/

char * multiply(char * num1, char * num2){
    int num1Len=strlen(num1);
    int num2Len=strlen(num2);
    char* result = malloc(sizeof(char)*(num1Len+num2Len+1));
    
    //carry array
    int carry[num1Len+num2Len+1];
    carry[0]=0;
    
    //if result == 0
    if ((num1Len==1 && num1[0]=='0') || (num2Len==1 && num2[0]=='0'))
    {
        result[0]='0';
        result[1]=0;
        return result;
    }
    
    int temp=0;
    int count=num1Len+num2Len;
    for(int i= 0 ; i<count ;i++)
    {
        temp=0;
        for(int j=0 ; j<=i ; j++)
        {
            if (num1Len-1+j-i >=0 && num2Len-1-j >=0)   //If target number exist.
                temp+=(num1[num1Len-1+j-i]-48)*(num2[num2Len-1-j]-48);
        }
        temp+=carry[i];
        result[i] = (temp%10)+48;
        carry[i+1] = temp/10;
    }

    //find the currcet length of result
    while(result[count-1]=='0')
        count--;
    
    //set '\0'
    result[count] = 0;
    
    //swap result
    for(int i=0 ; i<count/2 ;i++)
    {
        int charTemp=result[i];
        result[i]=result[count-1-i];
        result[count-1-i]=charTemp;
    }
    
    
    return result;
}
