

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** combine(int n, int k, int* returnSize, int** returnColumnSizes){
    //max size for all conditions is 184756, for n=20 , k=10.
    //Seems the task max is n=20, k=16, we set the size to 4865.
    int** result= malloc(sizeof(int*)*4865);
    int* retcolsizes = malloc(sizeof(int)*4865);
    *returnColumnSizes=retcolsizes;
    (*returnSize)=0;
    int stack[20]={0};
    int top=-1;
    int kTemp=k;
    int target=0;
    while(1)
    {
        //if target == n && kTemp !=0, there are no more element to be push ==> no more condition for result.
        if (target==n && kTemp != 0)
            break;
        //if kTemp!=0, still need to push ==> push element.
        else if (kTemp!=0)
        {
            stack[++top] = ++target;
            kTemp--;
        }
        //if kTemp==0, put new result and prepare another solution
        else
        {
            result[(*returnSize)]=malloc(sizeof(int)*k);
            retcolsizes[(*returnSize)]=k;
            for (int i=0; i<=top ; i++)
                result[(*returnSize)][i]=stack[i];
            (*returnSize)++;
            
            //pop element
            //if stack store n, pop until non-continuous number.
            if (stack[top]==n)
            {
                top--; kTemp++;
                while (top>=0 && stack[top]==stack[top+1]-1)
                {
                    top--; kTemp++;
                }
                
                //if top=-1, can't pop element  ==> no more condition for result.
                if (top==-1)
                    break;
                
                //set target to pop number +1,
                target=stack[top];
                top--; kTemp++;
            }
            //pop one number.
            else 
            {
                top--; kTemp++;
            }
        }
    }
    return result;
}
