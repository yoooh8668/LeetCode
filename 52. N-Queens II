int count=0;
//check whether Q is valid?
bool isQueenValid(char** table, int size, int currRow){
    for (int i=0 ; i<=currRow ; i++)
    {
        for (int j=0 ; j<size ; j++)
        {
            //start analyze
            if (table[i][j]=='Q')
            {
                //column search
                for(int p=1 ; (i+p) <= currRow ;p++)
                {
                    if (table[i+p][j]=='Q')
                        return false;
                }
                //left-down search
                for(int p=1 ; (i+p) <= currRow && (j-p) >= 0 ;p++)
                {
                    if (table[i+p][j-p]=='Q')
                        return false;
                }
                //right-down search
                for(int p=1 ; (i+p) <= currRow && (j+p) < size ;p++)
                {
                    if (table[i+p][j+p]=='Q')
                        return false;
                }
                //continue check next row.
                break;
            }
        }
    }
    return true;
}

//recursive add Q.
void addQueen(char** table, int row, int size){
    //initialize table
    if (row==0)
    {
        for (int i=0 ;i<size;i++)
        {
            for (int j=0; j<size;j++)
                table[i][j]='.';    
        }
    }
    
    for (int i=0 ; i<size ; i++)
    {
        table[row][i]='Q';
        if (isQueenValid(table, size, row))
        {
            if (row==size-1)//last element is complete.
            {
                count++;
            }
            else
                addQueen(table, row+1, size);
        }
        table[row][i]='.';
    }
}

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int totalNQueens(int n){
    //malloc table of temp result.
    int** table=malloc(sizeof(int*)*n);
    for (int i=0 ; i<n ;i++)
    {
        table[i]=malloc(sizeof(int)*n);
    }
    count=0;
    
    //Call addQueen function
    addQueen(table, 0, n);
    
    //free table
    for (int i=0 ; i<n ;i++)
    {
        free(table[i]);
    }
    free(table);
    
    return count;
}
