

bool isMatch(char * s, char * p){
    int sLen = strlen(s);
    int pLen = strlen(p);
    
    //check if pLen without *still larger then sLen
    int starCount = 0;
    for (int i=0 ; i<pLen ; i++)
    {
        if ( p[i] =='*')
            starCount++;
    }
    if (sLen < (pLen - starCount*2))
        return false;
    
    //check if s is match p from top
    printf("TOP check\n");
    int count =0;
    for (int i=0 ; i<sLen ; i++)
    {
        if (count == pLen) //p is out of index ,and s is not checked complete.
        {
            printf("p is no element!\n");            
            return false;
        }

        while(count < pLen)
        {
            if (s[i] == p[count] || p[count] == '.')   //if s[i] == p[count]( or '.') ,check the next i of s[i]
            {
                printf("case A\n");
                count++;
                break;
            }
            else if ( p[count]=='*' && p[count-1]==s[i])   // p[count-1]* match s[i]
            {
                printf("case B\n");
                break;
            }
            else if ( p[count]=='*' && p[count-1]=='.')   // p[count-1]* match s[i]
            {
                printf("case C\n");
                break;
            }
            else if ( p[count]=='*' )
            {
                printf("case D\n");
                count++;
            }
            else if ( count+1 < pLen )                      //if next count exist, check if it is a '*'
            {
                printf("case E\n");
                if ( p[count+1] == '*' )
                {
                    printf("case E1\n");
                    count+=2;
                }
                else
                {
                    printf("case E2\n");
                    return false;
                }
            }
            else 
            {
                printf("case NON MATCH\n");
                return false;
            }
        }
    }
    
    //check if s is match p from botton
    printf("BOTTON check\n");
    count =pLen-1;
    for (int i=sLen-1 ; i>=0 ; i--)
    {
        printf("i= %d count= %d\n",i,count);
        if (count < 0) //p is out of index ,and s is not checked complete.
        {
            printf("p is no element!\n");            
            return false;
        }

        while(count >= 0)
        {
            if (s[i] == p[count] || p[count] == '.')   //if s[i] == p[count]( or '.') ,check the next i of s[i]
            {
                printf("case A\n");
                count--;
                break;
            }
            else if ( p[count]=='*' && p[count-1]==s[i])   // p[count-1]* match s[i]
            {
                printf("case B\n");
                break;
            }
            else if ( p[count]=='*' && p[count-1]=='.')   // p[count-1]* match s[i]
            {
                printf("case C\n");
                break;
            }
            else if ( p[count]=='*' )
            {
                printf("case D\n");
                count--;
            }
            else if ( count-1 >=0 )                      //if next count exist, check if it is a '*'
            {
                printf("case E\n");
                if ( p[count-1] == '*' )
                {
                    printf("case E1\n");
                    count--;
                }
                else
                {
                    printf("case E2\n");
                    return false;
                }
            }
            else 
            {
                printf("case NON MATCH\n");
                return false;
            }
        }
    }
    
    /*
    int repeatCount =0;

    printf("check remain p\n");
    for (int i = count ; i < pLen ;i++)       //p is not read finish, check if something not match s last element?
    {
        printf("i = %d\n",i);
        if (p[i] == '*')        //p is use '*' before, check rest element.
        {
            printf("CASE A\n");
        }
        else
        {
            printf("CASE B\n");
            if ( p[i+1]=='*' )
                i++;
            else if( p[i] == s[sLen-i] )
                ;
            else 
                return false;
        }
    }
    */
    return true;
}
