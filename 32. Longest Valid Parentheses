/*******************************
1.search every start char check one time.
  Use the modify function of "20. Valid Parentheses".
  Time complexity:O(n^2)
*******************************/

int pairWithStart(char * s,int start){  //pairWithStart : Return maxLen with start char.
    
    int  sLen = strlen(s);
    int  top = -1;
    int  currentMatch=start;
    
    //After called-function return, function will auto call free. We don't need to malloc a memory.
    char stack[sLen];
    //char* stack = (char*)malloc(sizeof(char)*sLen);

    for(int i=start;i<sLen;i++)
    {
        top = top + 1;
        stack[top] = s[i];
        if(s[i] == ')')    //if s[i] is end mark => check the stack if pairs with start mark
        {
            if(top>=1)  //stack is non-NULL
            {
                if(stack[top]-stack[top-1]==1)     //')' - '(' =1, pair condition
                {
                    top = top-2;    //pop element
                    if (top<0)      //if no element in stack, this is the longest pair with start for now.
                        currentMatch=i+1;
                }
                else //non pair
                {
                    return (i-start); 
                }
            }
            else     //stack is NULL && add a end mark
            {
                return (i-start);
            }
        }
    }
    if(top < 0)     //finish check end mark && stack is NULL
    {
        return (sLen-start);
    }
    //else return currentLen
    return (currentMatch-start);
}


int longestValidParentheses(char * s){
    int sLen = strlen(s);
    int currentLen = 0;
    int computeLen = 0;
    for (int i=0 ; i+currentLen < sLen-1 ; i++)
    {
        computeLen =pairWithStart(s,i);
        currentLen = ( currentLen >= computeLen ) ? currentLen : computeLen;
    }
    return currentLen;
}



/******************************
2.check only once.
  Rather char, stack save the index of string that need to check pair.
  Every time we pair, we pop the stack and check the length for now by looking into the stack top.
  Remenber, if stack is null, we need to push the previous index.
  Time complexity:O(n)
*****************************/

int longestValidParentheses(char * s){
    int maxLen=0;
    int sLen = strlen(s);
    
    if (sLen == 0)
        return 0;
    
    int stack[sLen+1];
    int top = 0;
    stack[top] = -1;
    for (int i=0 ; i<sLen ; i++)
    {
        if (s[i]=='(')
        {
            top++;
            stack[top] = i;
        }
        else if (stack[top]!=-1 && s[stack[top]]=='(') // s[stack[top]] exist && stack top == '(' ==>match
        {
            top--;
            maxLen = (maxLen >= i-stack[top] )? maxLen : i-stack[top];  //save maxLen
        }
        else //if non pair or the stack is NULL ==> reset the stack.
        {
            top=0;
            stack[top]=i;
        }
    }
    
    return maxLen;
}
