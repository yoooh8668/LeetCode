bool isValid(char * s){
    
    int  sLen = strlen(s);
    int  top = -1;                                  //stack top;
    char* stack = (char*)malloc(sizeof(char)*10000);

    for(int i=0;i<sLen;i++)                         //check end mark
    {
        top = top + 1;
        stack[top] = s[i];                          //push current s[i] into stack
        if((s[i] == ')') || (s[i] == '}') || (s[i] == ']') )    //if s[i] is end mark => check the stack if pairs with start mark
        {
            if(top>=1)                                  //stack is non-NULL
            {
                if(abs(stack[top-1]-stack[top])<3)              // (-) = 1,  [-] = 2,  {-} = 2
                    top = top-2;                                //pair!! , pop this two element
                else
                    return false;                               //non-pair 
            }
            else                                        //stack is NULL && add a end mark
                return false;
        }
            
    }
    free(stack);
    if(top < 0)     //finish check end mark && stack is NULL
    {
        printf("IS VAILD\n");
        return true;
    }
    return false;
}

int longestValidParentheses(char * s){
    int sLen = strlen(s);
    int currentLen = 0;
    char* sCopy = (char*)malloc(sizeof(char)*30000);
    for (int i=0 ; i+currentLen <= sLen  ; i++)
    {
        printf("i=%d\n",i);
        for (int j=i+1 ; j<sLen; j++)
        {
            printf("j=%d\n",j);
            for(int k=i ; k<=j ; k++)
            {
                sCopy[k-i]=s[k];
            }
            sCopy[j-i+1]='\0';
            if (isValid(sCopy))
            {
                currentLen=j-i+1;
                printf("current len =%d\n",currentLen);
            }
            else
                break;
        }
    }
    return currentLen;
}
