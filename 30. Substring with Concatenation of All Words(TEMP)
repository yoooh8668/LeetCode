/****************************
environment variable will continue add on ==> even is the next question.
****************************/
//Environment count for result number 
int count = 0;

//Define whether current string need to be swap. 
//If this string never appears before, then return yes.
bool isSwap(char** table, int start , int end)
{
	for(int i = start ; i < end ; i++)
	{
		if((strcmp(table[i],table[end]))==0)
			return false;
	}
	return true;
}

//permutate string.
void permutate(char** table, int begin, int end,char* targetStr,int* result) 
{
    printf("permutate begin=%d,end=%d\n",begin,end);
    //begin = end ==>finish permutate.
    if (begin == end)
    {
        char resultTemp[5000]={0};        //create a permutate to run strstr
        for(int i = 0; i <= begin; i++)
        {
            printf("%s ,", table[i]);         //print this permutation
            strcat(resultTemp,table[i]);
        }
        printf("\n");
        printf("resultTemp = %s \n", resultTemp);
        int tempLen = strlen(resultTemp);
        printf("resultTemp length = %d \n", tempLen);
        char targetStrSave[10001]={0};
        strcpy(targetStrSave,targetStr);
        printf("targetStrSave=%s\n",targetStrSave);
        char* previousIndex;
        while(strstr(targetStrSave,resultTemp)!=NULL)
        {
            printf("Compare SUCCESS!!\n");
            //printf("target is at %p\n",strstr(targetStrSave,resultTemp));
            previousIndex = strstr(targetStrSave,resultTemp);
            //printf("target is at %p\n",previousIndex);
            //printf("start  is at %p\n",targetStrSave);
            //printf("Is at index of %d\n",previousIndex-targetStrSave);
            result[count++] = previousIndex - targetStrSave;
            if (strlen(targetStr) - tempLen - (previousIndex-targetStrSave) > tempLen)
                strcpy(targetStrSave,targetStr + tempLen + (previousIndex-targetStrSave));
            else
                targetStrSave[0]='\0';
        }
    }
   else
    {
        for(int i = begin; i <= end; i++)
        {
            printf("i=%d, begin=%d,end=%d\n",i,begin,end);
            if(isSwap(table, begin , i))
            {
                printf("START SWAP for %d and %d\n",begin,i);
                swap(table,begin,i);
                permutate(table, begin + 1, end,targetStr,result);//premutate next element
                swap(table,begin,i);
           }
        }
    }
}

//Swap Function
void swap(char** table,int a,int b)
{
    char temp[31];
    if (a!=b)
    {
        strcpy(temp,table[a]);
        strcpy(table[a],table[b]);
        strcpy(table[b],temp);
    }
}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){
    int *result=(int*)malloc(sizeof(int)*200);
    permutate(words, 0, wordsSize-1,s,result);
    printf("total:%d\n", count);
    *returnSize = count;
    return result;
}
