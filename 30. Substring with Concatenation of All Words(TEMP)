/****************************
Permutation by char is complete
****************************/
//Environment count for result number 
int count = 0;     

//Define whether current string need to be swap. 
//If this string never appears before, then return yes.
bool isSwap(char* start , char* end)
{
	char *temp;
	for(temp = start ; temp < end ; temp++)
	{
		if(*temp == *end)
			return false;
	}
	return true;
}

//permutate string.
//
void permutate(char list[], int begin, int end)      //產生list[begin:end]的所有排列
{      
    //begin = end ==>finish permutate.
    if  (begin == end)
    {         
        for(int i = 0; i <= begin; i++)            
            printf("%c ", list[i]);         //print this permutation
        printf("\n");        
        count++;                 //new condition
    }
   else    
    {        
        for(int i = begin; i <= end; i++)       
        {            
       		if(isSwap(&list[begin] , &list[i]))
            {
                swap(&list[begin], &list[i]);             
                permutate(list, begin + 1, end);            
                swap(&list[begin], &list[i]);        
           }
        }    
    }
}

//Swap Function
void swap(char *a, char *b)
{    
    char temp;    
    temp = *a;    
    *a = *b;    
    *b = temp;
} 
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){
    int *result=(int*)malloc(sizeof(int)*200);
    char list[] = {'3','5','8','2','8','2'};    
    permutate(list, 0, 5);
    printf("total:%d\n", count);     //輸出n的個數
    *returnSize = count;
    return result;
}

/****************************
Try to change it as char**
https://blog.csdn.net/hackbuteer1/article/details/7462447
https://www.itread01.com/content/1549687685.html
https://medium.com/@cashbooktw/c-%E8%AA%9E%E8%A8%80%E7%9A%84%E5%AD%97%E4%B8%B2%E8%A4%87%E8%A3%BD-94da3884dc6e
****************************/
//Environment count for result number 
int count = 0;

//Define whether current string need to be swap. 
//If this string never appears before, then return yes.
bool isSwap(char** table, int start , int end)
{
	for(int i = start ; i < end ; i++)
	{
		if((strcmp(table[i],table[end]))==0)
			return false;
	}
	return true;
}

//permutate string.
void permutate(char** table, int begin, int end,char* s) 
{
    printf("permutate begin=%d,end=%d\n",begin,end);
    //begin = end ==>finish permutate.
    if  (begin == end)
    {
        for(int i = 0; i <= begin; i++)
        {
            printf("%s ,", table[i]);         //print this permutation
            strcat(resultTemp,table[i]);
        }
        printf("\n");
        char resultTemp[5000];
        if (strstr(s,resultTemp))
        count++;                 //new condition
    }
   else
    {
        for(int i = begin; i <= end; i++)
        {
            printf("i=%d, begin=%d,end=%d\n",i,begin,end);
            if(isSwap(table, begin , i))
            {
                printf("START SWAP for %d and %d\n",begin,i);
                swap(table,begin,i);
                permutate(table, begin + 1, end,char* s);//premutate next element
                swap(table,begin,i);
           }
        }
    }
}

//Swap Function
void swap(char** table,int a,int b)
{
    char temp[31];
    if (a!=b)
    {
        strcpy(temp,table[a]);
        strcpy(table[a],table[b]);
        strcpy(table[b],temp);
    }
}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){
    int *result=(int*)malloc(sizeof(int)*200);
    //char temp[5];
    //strcpy(temp,words[0]);
    //printf("words[0]=%s\n",temp);
    permutate(words, 0, wordsSize-1);
    printf("total:%d\n", count);
    *returnSize = count;
    return result;
}
