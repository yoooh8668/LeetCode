/****************************
This is the correct answer.
But encounter: "Time Limit Exceeded".
****************************/
//Environment count for result number 
int count = 0;

//Define whether current string need to be swap. 
//If this string never appears before, then return yes.
bool isSwap(char** table, int start , int end)
{
    for(int i = start ; i < end ; i++)
    {
        if(!strcmp(table[i],table[end]))
            return false;
    }
    return true;
}

//permutate string.
void permutate(char** table, int begin, int end,char* targetStr,int* result) 
{
    //begin = end ==>finish permutate.
    if (begin == end)
    {
        char resultTemp[500]={0};        //create a permutate to run strstr
        for(int i = 0; i <= begin; i++)
        {
            strcat(resultTemp,table[i]);
        }
        int tempLen = strlen(resultTemp);
        char* previousIndex;
        int shiftNumber=0;
        previousIndex = strstr(targetStr+shiftNumber,resultTemp);
        while(previousIndex!=NULL)
        {
            shiftNumber=previousIndex-targetStr;
            result[count++] = shiftNumber;
            shiftNumber++;
            previousIndex = strstr(targetStr+shiftNumber,resultTemp);
        }
    }
    //still have non-finished element.
    else
    {
        for(int i = begin; i <= end; i++)
        {
            if(isSwap(table, begin , i))
            {
                swap(table,begin,i);
                permutate(table, begin + 1, end,targetStr,result);//premutate next element
                swap(table,begin,i);//recover 
           }
        }
    }
}

//Swap Function
void swap(char** table,int a,int b)
{
    char temp[31];
    if (a!=b)//If two char are different pointer.
    {
        strcpy(temp,table[a]);
        strcpy(table[a],table[b]);
        strcpy(table[b],temp);
    }
}
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findSubstring(char * s, char ** words, int wordsSize, int* returnSize){
    int *result=(int*)malloc(sizeof(int)*20);
    count=0;
    permutate(words, 0, wordsSize-1,s,result);
    *returnSize = count;
    return result;
}
