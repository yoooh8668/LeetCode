//Modified function from 20. Valid Parentheses
bool isValid(char * s){
    
    int  sLen = strlen(s);
    int  top = -1;
    char stack[sLen+1]; //array don't need to be malloced.

    for(int i=0;i<sLen;i++) 
    {
        top = top + 1;
        stack[top] = s[i];
        if(s[i] == ')')
        {
            if(top>=1) 
            {
                if(stack[top]-stack[top-1]==1)
                    top = top-2;
                else
                    return false;
            }
            else
                return false;
        }
    }
    if(top < 0) 
        return true;
    return false;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** generateParenthesis(int n, int* returnSize){
    
    //for each n, there is a different returnSize. set the two largest to its returnSize.
    //8=>1430, 7=>429, 6=>132, 5=>42, 4=>14, 3=>5 ,2=>2 ,1=>1
    int total=0;
    switch(n) {
    case 8:
        total=1430;
        break;
    case 7:
        total=429;
        break;
    default:
        total=132;
        break;
    }
    
    //malloc result
    char **result = malloc(sizeof(char*)*total);
    //malloc for each string
    for (int i = 0; i < total; i++)
        result[i] = malloc(2*n+1);
    
    *returnSize=0;
    int minNumber=0;
    int maxNumber=0;
    //'(' =1 ,')'=0
    
    //create minNumber ()()...()() = 1010...1010
    //create maxNumber ((((...)))) = 1111...0000
    for (int i=1 ; i<=n ; i++)
    {
        minNumber<<=2;
        minNumber+=2;
        maxNumber<<=2;
        maxNumber += pow(2,i);
    }

    char buf[(2*n)+1];
    int count=0;
    
    //For every two number between minNumber and maxNumber, check if it is valid?
    for (int i=minNumber ; i<=maxNumber ; i+=2) 
    {
        count=0;
        //change number to char form.
        for (int j=i ; j>0 ;j/=2) 
        {
            if (j%2==0)
                buf[2*n-1-(count++)]=')'; //buf[2*n-1-count]=')';      count++;
            else 
                buf[2*n-1-(count++)]='(';
        }
        buf[count]='\0';
        
        //check if it is valid?
        if (isValid(buf))
        {
            strcpy(result[(*returnSize)++], buf);
        }
    }  
    return result;
}
