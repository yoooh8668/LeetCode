//Same way as '10. Regular Expression Matching'.
//This way is "pass the start point"
//if the end of the two array has a path to start point ==>return true
//if not the two array is not the same.

bool isMatch(char * s, char * p){
    int sLen = strlen(s);
    int pLen = strlen(p);
    bool dp[sLen+1][pLen+1] ;
    
    //initialize to false
    for(int i=0 ; i<=sLen ; i++)
    {
        for(int j=0 ; j<=pLen ; j++)
        {
            dp[i][j] = false;
        }
    }
    //start point
    dp[0][0] = true;
    
    //if p has (continuous)'*' from beginnig, mark 'true' after '*' position.
    //this are all the possible start point
    for (int j=1; j<=pLen ; j++)
    {
        if(p[j-1] == '*' && dp[0][j-1]) 
        {
            dp[0][j] =true;
        }
    }
    
    for (int i=1 ; i<=sLen ; i++)
    {
        for (int j=1 ; j<=pLen ; j++)
        {
            if(p[j-1] == s[i-1] || p[j-1] == '?')   //if p match s, pass the start point.
            {
                dp[i][j] = dp[i-1][j-1];
            }
            else if(p[j-1] == '*')
            {
                //Below are all possible to use the *
                //it might (not use )  ||  (use once)  || (repeat *)
                dp[i][j] = (dp[i][j-1] || dp[i-1][j-1] || dp[i-1][j]);
            }
        }
    }
    return dp[sLen][pLen];
}
