

bool isValid(char * s){
    int sLen = strlen(s);
    //odd sLen always false
    if (sLen %2 == 1)
        return false;
    
    int count =sLen;
    for (int i=0 ; i<=sLen-2 ;i++)
    {
        if (s[i])                   //s[i] != NULL
        {
            for (int j=i+1 ; j<=sLen-1 ;)
            {
                if( !s[j] )         //s[j] == NULL
                    j++;
                else if (  (s[i]=='(' && s[j]==')') || (s[i]=='{' && s[j]=='}') || (s[i]=='[' && s[j]==']') )
                {
                    s[i] =0;
                    s[j] =0;
                    i=-1;
                    count-=2;
                    if (count == 0)
                        return true;
                    break;
                }
                else
                    break;
            }
        }
        else 
            i++;
    }
    return false;
}

/*C online solution ==> stack
bool isValid(char * s){
    
    int  sLen = strlen(s);
    int  top = -1;                                      //stack top;
    char* stack = (char*)malloc(sizeof(char)*10000);

    for(int i=0;i<sLen;i++)
    {
        top = top + 1;
        stack[top] = s[i];                              //put current s[i]
        if((s[i] == ')') || (s[i] == '}') || (s[i] == ']') )    //if end mark get into the stack
        {
            if(top>=1)                                          //stack is non-NULL
            {
                if(abs(stack[top-1]-stack[top])<3)              // (-) = 1,  [-] = 2,  {-} = 2
                    top = top-2;
                else
                    return false;
            }
            else                                                //stack is NULL && add a end mark
                return false;
        }
            
    }
    free(stack);
    if(top < 0)     //finish check && stack is NULL
        return true;
    return false;
}
*/
