/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCombinations(char * digits, int* returnSize){
    //char combination from 2~9
    char *str[] = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    int sLen[] = {3,3,3,3,3,4,3,4};
    char **result = malloc(256 * sizeof(char *));
    char buf[5];
    
    //malloc for each string
    for (int i = 0; i < 256; i++)
        result[i] = malloc(5);
    
    //if you assign 0 to a char variable, means '\0'
    result[0][0] = 0;  //!!! This means '\0'
    *returnSize = 0;
    
    //*digits = '2'   (first char),   *(digits+1) = '3'  (second char)
    //*digits -'2' = '2' -'2'  = 0 ==>ASCII calculation,   *(digits + 1) - '2' = 1
    
    //if digits[0] != NULL
    if (*digits) {
        for (int i = 0; i < sLen[*digits - '2']; i++) //because digits = '2'~'9' , str[*digits -'2'] will always has value
        {
            buf[0] = str[*digits - '2'][i];           //str[0][0] = 'a'
            buf[1] = 0;
            
            //if digits[1]!=NULL
            if (*(digits + 1)) {
                for (int j = 0; j < sLen[*(digits + 1) - '2']; j++) {
                    buf[1] = str[*(digits + 1) - '2'][j];
                    buf[2] = 0;
                    
                    //if digits[2]!=NULL
                    if (*(digits + 2)) {
                        for (int k = 0; k < sLen[*(digits + 2) - '2']; k++) {
                            buf[2] = str[*(digits + 2) - '2'][k];
                            buf[3] = 0;

                            //if digits[3]!=NULL
                            if (*(digits + 3)) {
                                for (int l = 0; l < sLen[*(digits + 3) - '2']; l++) {
                                    buf[3] = str[*(digits + 3) - '2'][l];
                                    buf[4] = 0;
                                    strcpy(result[(*returnSize)++], buf);
                                }
                            } else
                                strcpy(result[(*returnSize)++], buf);
                        }
                    } else
                      strcpy(result[(*returnSize)++], buf);
                }
            } else
                strcpy(result[(*returnSize)++], buf);
        }
    }
    
    return result;
}
