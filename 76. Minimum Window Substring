/***********************************************
1. For string s, and t. 
   Search t[0] from s, search t[1] from s...
   The searched char, mark'*' for skip on next search.
   
   If first search passed, we further search for smaller window.
   If t[n] is at s[k], search t[n] from s[k+1].
***********************************************/
#define MIN(x,y) ((x)<(y))?(x):(y)
#define MAX(x,y) ((x)>(y))?(x):(y)

char * minWindow(char * s, char * t){
    int sLen=strlen(s);
    int tLen=strlen(t);
    char* result=malloc(sizeof(char)*(sLen+1));
    //sCopy for mark the char that had been searched.
    char sCopy[sLen+1];
    strcpy(sCopy,s);
    
    //first time search
    char* strchrTarget;
    int start=sLen;
    int end=-1;
    int pos=0;
    for (int i=0 ; i<tLen ; i++)
    {
        strchrTarget=strchr(sCopy,t[i]);
        if (strchrTarget==NULL)
        {
            result[0]='\0';
            return result;
        }
        else
        {
            pos=strchrTarget-sCopy;
            //put '*' at searched char for skip on next search.
            sCopy[pos]='*';
            start=MIN(start,pos);
            end  =MAX(end  ,pos);
        }
    }
    
    //further search
    int startTemp=start;
    int endTemp=end;
    while(1)
    {
        //search another target
        strchrTarget=strchr(sCopy+startTemp+1,s[startTemp]);
        
        //If not match
        if (strchrTarget==NULL)
            break;
        else
        {
            pos=strchrTarget-sCopy;
            //put '*' at searched char for skip on next search.
            sCopy[pos]='*';
            //update startTemp
            for (int j=startTemp+1 ; j<sLen ; j++)
            {
                if (sCopy[j]=='*')
                {
                    startTemp=j;
                    break;
                }
            }

            //update endTemp
            endTemp  =MAX(endTemp,pos);

            //if this section is smaller, update start/end
            if (end-start > endTemp-startTemp)
            {
                start=startTemp;
                end=endTemp;
            }
        }
    }
    
    //Put in result
    int count=0;
    for (int i=start ; i<=end ; i++)
    {
        result[count++]=s[i];
    }
    result[count]='\0';
    return result;
}

/************************************************
0. Using dp search,
   This way can't handle t which contain repeated char.
*************************************************/
void findMinMatch(int** dp, int n, int m, int* result){
    int *index=malloc(sizeof(int)*n);
    for (int i=0 ; i<n ; i++)
        index[i]=-1;
    int allElementReady=0;
    for (int j=0 ; j<m ; j++)
    {
        for (int i=0 ;i<n ;i++)
        {
            if (dp[i][j]==1)
            {
                if (index[i]==-1)
                    allElementReady++;
                index[i]=j;
                if (allElementReady==n)
                    searchWidth(index, n, result);
                break;
            }
        }
    }
    free(index);
    return result;
}

void searchWidth(int* index, int n, int* result){   
    int startTemp=index[0];
    int endTemp=index[0];
    for (int i=0 ; i<n ;i++)
    {
        if (startTemp > index[i])
            startTemp=index[i];
        if (endTemp < index[i])
            endTemp=index[i];
    }
    
    if (result[1]-result[0] > endTemp-startTemp)
    {
        result[0]=startTemp;
        result[1]=endTemp;
    }
}

char * minWindow(char * s, char * t){
    int sLen = strlen(s);
    int tLen = strlen(t);
    
    //sort t and remove the same char.
    char temp;
    
    int** dp=malloc(sizeof(int*)*tLen);
    for (int i=0 ; i<tLen ; i++)
    {
        dp[i]=malloc(sizeof(int)*sLen);
        for (int j=0 ; j<sLen ;j++)
        {
            if (t[i]==s[j])
                dp[i][j]=1;
            else 
                dp[i][j]=0;
        }
    }
    int *resultIndex=malloc(sizeof(int)*2);
    resultIndex[0]=-1;
    resultIndex[1]=sLen+1;
    findMinMatch(dp, tLen, sLen, resultIndex);
    
    char* result=malloc(sizeof(char)*(resultIndex[1]-resultIndex[0]+2));
    int count=0;
    if (resultIndex[0]!=-1)
    {
        for (int i=resultIndex[0] ; i<=resultIndex[1] ; i++)
        {
                result[count++]=s[i];
        }
    }
    result[count]='\0';
    
    for (int i=0 ; i<tLen ; i++)
        free(dp[i]);
    free(dp);
    free(resultIndex);
    
    return result;
}
