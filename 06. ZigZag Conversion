
char * convert(char * s, int numRows){
    int sLen = strlen(s);
    char result[(sLen+1)];
    char *buf = &result;
    
    if (sLen == 0)
    {
        result[0] = '\0';
        return buf;   
    }
    else if (numRows == 1 || sLen <=numRows)
    {
        for (int i =0 ; s[i] ; i++)
            result[i] = s[i];
        result[sLen] = '\0';
        return buf;
    }
    
    int target = 0;
    int remainder = sLen % (numRows -1) ;//if has remainder ?
    int bundle = (sLen -1 -remainder) / (numRows -1) ;//number of set in size of (numRows-1)

    //Set remainder direction up or down
    bool remainderDir;
    int count = 0;
    if (bundle % 2 == 0)
        remainderDir = true ;   //up
    else 
        remainderDir  = false ; //down
    
    //Start put element in result row by row ,then bundle by bundle.
    for (int row =0 ; row<numRows ; row++)
    {
        //printf("\n\nrow =%d\n",row);
        for(int k=0; k<=bundle ; k++)
        {
            //printf("k =%d\n",k);
            
            //Set target for input
            if ( k%2 ==0)   //down dir
                target = k*(numRows -1) +row;
            else            //up dir
                target = (k+1)*(numRows -1)-row;
            
            if ((row ==0 ) && (k%2 !=0))                //ignore odd bundle for first row 
            {
                ;
            }
            else if ((row ==numRows-1 ) && (k%2!=1))    //ignore even bundle for last row 
            {
                ;
            }
            else
            {
                //printf("count =%d ,target = %d\n",count,target);                
                result[count] = s[target];
                count ++;
            }
            
            //this is the last bundle, check if it has remainder?
            if (k == bundle) 
            {
                //printf("\nPROCESS remainder!!\n");
                if (remainderDir == true && (sLen > target -2*row +2*(numRows-1)))
                {
                    result[count] = s[(target -2*row +2*(numRows-1))];
                    count ++;
                }
                else if (remainderDir == false && (sLen > target +2*row))
                {   
                    result[count] = s[(target +2*row)];
                    count ++;
                }
                    
            }
        }
    }
    
    result[sLen] = '\0';
    return buf;
}
