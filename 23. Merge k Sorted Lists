/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* mergeKLists(struct ListNode** lists, int listsSize){
    //for lists that size smaller than 2
    if (listsSize == 0)
        return NULL;
    else if (listsSize ==1)
        return lists[0];
    
    //find start lists that is non-NULL
    int startPoint =0;
    for (int i=0 ; i<listsSize-1 ; i++)
    {
        if (!lists[i])
            startPoint++;
        else
            break;
    }
    
    //merge start
    struct ListNode* start;//return value
    struct ListNode* temp; 
    struct ListNode* l1;
    struct ListNode* l2;
    start = lists[startPoint];
    for (int i=startPoint ; i<=listsSize -2 ; i++) 
    {
        l1 =start;
        l2 =lists[i+1];
        
        //check if l2 is NULL?
        if(!l2)    
            continue;

        //determine the start list
        if (l1->val < l2->val)
        {
            start=l1;
            l1=l1->next;
        }
        else
        {
            start=l2;
            l2=l2->next;
        }
        temp=start;

        //start sort til l1 or l2 are NULL
        while( l1 && l2)
        {
            if (l1->val < l2->val)
            {
                temp->next=l1;
                temp=l1;
                l1=l1->next;
            }
            else
            {
                temp->next=l2;
                temp=l2;
                l2=l2->next;
            }
        }

        //connect the remained
        if ( !l1 )
            temp->next=l2;
        else
            temp->next=l1;
    }
    return start;
}


/* C online solution ==>Recursive
//merge two lists into one list, Save every list that generated this way.
//Then, recursive it.
//This way can reduce the calculation time because there is no large result during calculation.

//Same way as online solution 21.Merge Two Sorted Lists
struct ListNode* mergeLists(struct ListNode* l1, struct ListNode* l2){
    if (!l1) return l2;
    if (!l2) return l1;
    
    if (l1 -> val < l2 -> val) {
        l1 -> next = mergeLists(l1 -> next, l2);
        return l1;
    }
    
    l2 -> next = mergeLists(l1, l2 -> next);
    return l2;
}

struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    if (!listsSize)
        return NULL;
    
    if (listsSize == 1)
        return lists[0];
    
    //reducedNum = half of the size(round up)
    int reducedNum = listsSize / 2;
    if (listsSize % 2) reducedNum++;
    
    struct ListNode** reducedLists = (struct ListNode**) malloc(reducedNum * sizeof(struct ListNode*));
     
    int i = 0;
    //merge every two lists, and save them.
    while (i < listsSize) {
        if (i + 1 == listsSize) {
            reducedLists[i / 2] = lists[i];
            break;
        }
        reducedLists[i / 2] = mergeLists(lists[i], lists[i + 1]);       //merged list[0] and list[1], save to reducedLists[0];
        i += 2;
    }
    
    return mergeKLists(reducedLists, reducedNum);                       //recursive this function for reducedList.
}
*/
