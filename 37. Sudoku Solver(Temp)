bool isValidSudoku(char** board, int boardSize, int* boardColSize){
    //variable that for 3x3 sub-boxes
    int row=0;
    int col=0;
    int row2=0;
    int col2=0;
    
    for (int i=0 ; i<9 ; i++)
    {
        for (int j=0 ; j<9 ; j++)
        {
            //printf("board[%d][%d]=%c\n",i,j,board[i][j]);
            if (board[i][j] != '.') // If it's '.'==>Skip
            {
                //checking by row
                for (int k=j+1 ; k<9 ; k++)
                {
                    if (board[i][j] == board[i][k])
                    {
                        return false;
                    }
                }
                //checking by column
                for (int k=i+1 ; k<9 ; k++)
                {
                    if (board[i][j] == board[k][j])
                    {
                        return false;
                    }
                }
            }
            //checking by 3x3 sub-boxes
            if ( i%3==0 && j%3==0)
            {
                for (int k=0 ; k<9 ; k++)
                {
                    row = k/3;
                    col = k%3;
                    if (board[i+row][j+col]!='.') // If it's '.'==>Skip
                    {
                        for (int p=k+1 ; p<9 ; p++)
                        {
                            row2 = p/3;
                            col2 = p%3;
                            if (board[i+row][j+col] == board[i+row2][j+col2])
                            {
                                return false;
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

/***sudokuAdder***
  Adder add an number to count which char is '.', then pass another count to next Adder.
  If Next Adder return false, then switch another number.
  If number 1~9 are all failed, set count back to '.' and return false.
***/
bool sudokuAdder(char** board, int boardSize, int* boardColSize, int count)
{    
    //If input count is 81 or larger, finish checking.
    if (count == 81)
        return true;
    
    //Find next count that to be added.
    int countNext=count+1;
    bool ret=false;
    while (countNext < 81 && board[countNext/9][countNext%9] != '.')
    {
        countNext++;
    }
    
    //for this count, try 1~9, and check if it's valid ?
    for (int i=49 ; i<=58 ; i++) //ASCII 49='1' , 57='9'.
    {
        if (i==58) //if 1~9 are all inValid => reset to '.' and return false. 
        {
            board[count/9][count%9] = '.'; //reset
            return false;
        }
        board[count/9][count%9] = i; 
        if (isValidSudoku(board,9,boardColSize)) // if current number is valid ==> add number to countNext
        {
            ret = sudokuAdder(board,9,boardColSize,countNext);
            if(ret)
                return true;
        }
    }
    //for compile 
    return false;
}


void solveSudoku(char** board, int boardSize, int* boardColSize){
    
    int count =0 ;
    while (board[count/9][count%9] != '.')
    {
        count++;
    }
    sudokuAdder(board,9,boardColSize,count);
}
